Dot Product
Algebraically, the dot product is the sum of the products of the
corresponding entries of the two vectors.
(used this in the function)

It is a measure of direction and magnitude, i.e.:
	- how much the vectors are going in the same direction
	- how long the vectors are compared to each other

Range: any real number.

Geometrically, it is the product of the Euclidean magnitudes of
the two vectors and the cosine of the angle between them.
A·B = ||A|| ||B|| cos(θ)
where ||A|| and ||B|| are the magnitudes of the vectors,
and θ is the angle between the vectors.

These definitions are equivalent when using Cartesian point.

Cosine in rel. to angle between vectors:
	-	0 deg: cosine is 1
	-	180 deg: cosine is -1
	-	90 deg: cosine is 0

Dotprod depends on angle (deg) between vectors:
	> 0 && < 90		positive
	== 90			0
	> 90 && < 180	negative
*/



Ray Plane Intersection

Ray formula:
	r(t) = o + t * d
	Where
		o is the point of the ray
		t is the distance traveled (our target value later)
		d is the defining vector of the ray
Plane formula:
	(p' - p) * n = 0
	Where
		p' is the evaluated point
		p is the point of the plane
		n is the defining vector of the plane
	Means that the vector connecting p and the evaluated point p'
	is orthogonal to the plane's normvector and therefore in the plane.
Integrate ray into plane formula instead of p':
	(r(t) - p) * n = 0
	((o + t * d) - p) * n = 0
Solve for t:
	((o + td) - p) * n = 0
	(o + td)n - pn = 0
	on + tdn - pn = 0
	tdn = pn - on
	t = (pn - on) / (dn)
	or
	t = [(p - o) * n] / [d * n] -> used in the function
Cases
1)	If dividend is smaller than EPSILON:
	Ray starts in plane -> immediate intersection (return 0)
2)	If divisor is smaller than EPSILON:
	Ray is parallel to plane -> no intersection (return INFINITY)
3)	If result is negative:
	Intersection point is behind ray -> no intersection (return INFINITY)
4)	Intersection found -> one intersection (return dividend / divisor)

Ray Sphere Intersection

Sphere formula: ||(p - c)||² = r²
	c = center of sphere
	r = radius of sphere
	p = point on sphere
	||x|| means length/magnitude of the vector x
insert ray formula for point p and solve for t to get a
quadratic equation. Solve that to get the discriminants:

if (discriminant < 0)
	return (INFINITY);
	-> no intersection
if (discriminant == 0)
	return (-b / (2 * a));
	-> only one intersection point (tangent)
if (intrsct2 < 0)
	return (INFINITY);
	-> sphere behind ray, no intersection
if (intrsct1 >= 0)
	return (intrsct1);
	-> 2 intersections but we only want intrsct1
	intrsct2 however is also valid (if ray passes thru sphere)
return (intrsct2);
	-> ray originates inside sphere if intrsct1 < 0, one intersection

Ray Cylinder Intersection

Split problem into 3 parts:
-	Solve for endless tube
-	Delimit tube
-	Solve for the caps

Infinite cylinder along y axis of radius r has equation
x² + z² - r² = 0.
The equation for a more general cylinder of radius r
oriented along a line p_a + v_a * t:
(q - pa - (va,q - pa)va)2 - r2 = 0
where q = (x,y,z) is a point on the
cylinder.

the quadratic equation usually has two solutions (t1 and t2) of which we choose the closer -
because that is where our ray will first hit.
Since we ALWAYS want the closer one (t1), we dont calculate t2.
This means that we are actually only calculating the portion of the object that is facing us,
resulting in half tubes for cylinders. See PNG for visualization of the half cylinder.
The reason this happens is: the infinite cylinder is calculated first and gives us t1. But later
we apply the boundary of length and that t1 gets thrown out. T2 would have been visible, but we already
discarded that. If we wanted to make a hollow cylinder or we wanted to start a ray inside of a cylinder,
we would have to keep t2 and calculate it!
But: this problem is only visible as long as the caps aren't rendered. As soon as the caps are included,
the missing portion of the cylinder is behind them anyway and it doesn't matter.
NOTE: Changed it back to also calculate t2 because the subject asks for dealing with rays
inside of objects.
Kept the text and img because it is interesting to visualize the effects of the math.

Cylinder Function with comments
double	cylinder_tube(t_ray ray, t_cylinder cylinder)
{
	t_helper	h;
	t_3d		v;
	t_3d		u;
	t_3d		oc;
	
	// Compute the direction vector of the ray projected onto the cylinder's axis
	v = mult(cylinder.axis, dot(ray.direction, cylinder.axis));
	// Compute the direction vector of the ray perpendicular to the cylinder's axis
	v = subtract(ray.direction, v);
	// Compute the origin vector of the ray projected onto the cylinder's axis
	oc = subtract(ray.origin, cylinder.base);
	u = mult(cylinder.axis, dot(oc, cylinder.axis));
	// Compute the origin vector of the ray perpendicular to the cylinder's axis
	u = subtract(oc, u);
	// Compute coefficients of quadratic equation
	h.a = dot(v, v);
	h.b = 2 * dot(v, u);
	h.c = dot(u, u) - cylinder.radius * cylinder.radius;
	// Solve quadratic equation only for closer point t1
	h.discriminant = h.b * h.b - 4 * h.a * h.c;
	if (h.discriminant < 0)
		return (INFINITY);
	h.t1 = (-h.b - sqrt(h.discriminant)) / (2 * h.a);
	if (h.t1 < 0)
		return (INFINITY);
	//Intersection of ray with cylinder is origin of ray + 
	//distance t1 traveled along direction of ray
	h.intrsct = add(ray.origin, mult(ray.direction, h.t1));
	h.intrsct = subtract(h.intrsct, cylinder.base);
	h.dot_prod = dot(h.intrsct, cylinder.axis);

	if (!(h.dot_prod >= -cylinder.height * 0.5 && h.dot_prod <= cylinder.height * 0.5))
		return INFINITY;
	if (h.t1 < 0)
		return (INFINITY);
	return h.t1;
}